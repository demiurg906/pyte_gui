# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: client/static/screen-message.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='client/static/screen-message.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\"client/static/screen-message.proto\"M\n\x0bScreenState\x12\x1a\n\x05lines\x18\x01 \x03(\x0b\x32\x0b.ScreenLine\x12\x10\n\x08\x63ursor_x\x18\x03 \x01(\x05\x12\x10\n\x08\x63ursor_y\x18\x04 \x01(\x05\"3\n\nScreenLine\x12\t\n\x01i\x18\x01 \x01(\x05\x12\x1a\n\x05\x63\x65lls\x18\x02 \x03(\x0b\x32\x0b.ScreenCell\"e\n\nScreenCell\x12\x11\n\tcharacter\x18\x01 \x01(\t\x12\x10\n\x08reversed\x18\x02 \x01(\x08\x12\x18\n\x08\x66g_color\x18\x03 \x01(\x0e\x32\x06.Color\x12\x18\n\x08\x62g_color\x18\x04 \x01(\x0e\x32\x06.Color*j\n\x05\x43olor\x12\t\n\x05\x42LACK\x10\x00\x12\x07\n\x03RED\x10\x01\x12\t\n\x05GREEN\x10\x02\x12\t\n\x05\x42ROWN\x10\x03\x12\x08\n\x04\x42LUE\x10\x04\x12\x0b\n\x07MAGNETA\x10\x05\x12\x08\n\x04\x43YAN\x10\x06\x12\t\n\x05WHITE\x10\x07\x12\x0b\n\x07\x44\x45\x46\x41ULT\x10\x08\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_COLOR = _descriptor.EnumDescriptor(
  name='Color',
  full_name='Color',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='BLACK', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RED', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GREEN', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BROWN', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BLUE', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MAGNETA', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CYAN', index=6, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='WHITE', index=7, number=7,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DEFAULT', index=8, number=8,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=273,
  serialized_end=379,
)
_sym_db.RegisterEnumDescriptor(_COLOR)

Color = enum_type_wrapper.EnumTypeWrapper(_COLOR)
BLACK = 0
RED = 1
GREEN = 2
BROWN = 3
BLUE = 4
MAGNETA = 5
CYAN = 6
WHITE = 7
DEFAULT = 8



_SCREENSTATE = _descriptor.Descriptor(
  name='ScreenState',
  full_name='ScreenState',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='lines', full_name='ScreenState.lines', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='cursor_x', full_name='ScreenState.cursor_x', index=1,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='cursor_y', full_name='ScreenState.cursor_y', index=2,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=38,
  serialized_end=115,
)


_SCREENLINE = _descriptor.Descriptor(
  name='ScreenLine',
  full_name='ScreenLine',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='i', full_name='ScreenLine.i', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='cells', full_name='ScreenLine.cells', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=117,
  serialized_end=168,
)


_SCREENCELL = _descriptor.Descriptor(
  name='ScreenCell',
  full_name='ScreenCell',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='character', full_name='ScreenCell.character', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='reversed', full_name='ScreenCell.reversed', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='fg_color', full_name='ScreenCell.fg_color', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bg_color', full_name='ScreenCell.bg_color', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=170,
  serialized_end=271,
)

_SCREENSTATE.fields_by_name['lines'].message_type = _SCREENLINE
_SCREENLINE.fields_by_name['cells'].message_type = _SCREENCELL
_SCREENCELL.fields_by_name['fg_color'].enum_type = _COLOR
_SCREENCELL.fields_by_name['bg_color'].enum_type = _COLOR
DESCRIPTOR.message_types_by_name['ScreenState'] = _SCREENSTATE
DESCRIPTOR.message_types_by_name['ScreenLine'] = _SCREENLINE
DESCRIPTOR.message_types_by_name['ScreenCell'] = _SCREENCELL
DESCRIPTOR.enum_types_by_name['Color'] = _COLOR

ScreenState = _reflection.GeneratedProtocolMessageType('ScreenState', (_message.Message,), dict(
  DESCRIPTOR = _SCREENSTATE,
  __module__ = 'client.static.screen_message_pb2'
  # @@protoc_insertion_point(class_scope:ScreenState)
  ))
_sym_db.RegisterMessage(ScreenState)

ScreenLine = _reflection.GeneratedProtocolMessageType('ScreenLine', (_message.Message,), dict(
  DESCRIPTOR = _SCREENLINE,
  __module__ = 'client.static.screen_message_pb2'
  # @@protoc_insertion_point(class_scope:ScreenLine)
  ))
_sym_db.RegisterMessage(ScreenLine)

ScreenCell = _reflection.GeneratedProtocolMessageType('ScreenCell', (_message.Message,), dict(
  DESCRIPTOR = _SCREENCELL,
  __module__ = 'client.static.screen_message_pb2'
  # @@protoc_insertion_point(class_scope:ScreenCell)
  ))
_sym_db.RegisterMessage(ScreenCell)


# @@protoc_insertion_point(module_scope)
